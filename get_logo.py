import os, requests, pandas as pd, urllib3, time, psycopg2, cairosvg
from PIL import Image
from urllib.parse import urljoin, urlparse
from fake_useragent import UserAgent # type: ignore
from concurrent.futures import ThreadPoolExecutor, as_completed
from io import BytesIO
from cluster_logo import images_compare
from bs4 import BeautifulSoup


start_time = time.time()

# source enviroment/bin/activate

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def get_favicon_enhanced(url, size=64):
    try:     
        parsed_url = urlparse(url)
        query = parsed_url.query

        for param in query.split("&"):
            key, value = param.split("=")
            if key == "domain":
                domain = urlparse(value).netloc
                
        favicon_url = try_multiple_favicon_methods(domain, size)
        if favicon_url:
            return favicon_url
        else:
            return f"https://www.google.com/s2/favicons?domain={domain}&sz={max(16, min(256, size))}"
    except Exception as error:
        return f"https://www.google.com/s2/favicons?domain={domain}&sz={max(16, min(256, size))}"


def try_multiple_favicon_methods(url, size=64):
    """Comprehensive logo/favicon discovery with img tag support."""
    
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url.lstrip("/")
    

    url_variants = [
        url,
        url.replace('http://', 'https://'),
        f'https://www.{url.split("://")[-1]}',
        f'http://www.{url.split("://")[-1]}'
    ]

    for variant in url_variants:
        response = requests.get(variant, headers={'User-Agent': UserAgent().random}, verify=False, timeout=10)
        if response.status_code == 200:
            break
    else:
        return None

    soup = BeautifulSoup(response.text, 'html.parser')

    candidates = []
    icons = []

    logo_imgs = soup.find_all('img', {
        'src': lambda x: x and any(kw in x.lower() for kw in 'logo')
    })
    candidates.extend([urljoin(url, img['src']) for img in logo_imgs if img.get('src')])


    for link in candidates:
        if link:
            try:
                if any(link.lower().endswith(ext) for ext in '.png'):
                    return link
            except requests.RequestException:
                continue

    for rel in ['icon', 'shortcut icon', 'apple-touch-icon']:
        links = soup.find_all("link", rel=lambda x: x and rel in x.lower())
    candidates.extend([urljoin(url, l['href']) for l in links if l.get('href')])
    icons.extend([urljoin(url, l['href']) for l in links if l.get('href')])
    

    for link in icons:
        if link:
            try:
                if any(link.lower().endswith(ext) for ext in '.png'):
                    return link
            except requests.RequestException:
                continue

    for link in candidates:
        if link:
            try:
                if any(link.lower().endswith(ext) for ext in ['.ico', '.avif', '.svg', '.jpeg', '.jpg']):
                    return link
            except requests.RequestException:
                continue
    return None




def get_favicon_no_secure_protocol_www(url, size=64):
        
    parsed_url = urlparse(url)
    query = parsed_url.query

    for param in query.split("&"):
        key, value = param.split("=")
        if key == "domain":
            domain = "www." + urlparse(value).netloc
    url = domain
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url.lstrip("/")
    
    return f"https://www.google.com/s2/favicons?domain={domain}&sz={max(16, min(256, size))}"


def get_favicon_no_secure_protocol(url, size=64):
  
    parsed_url = urlparse(url)
    query = parsed_url.query

    for param in query.split("&"):
        key, value = param.split("=")
        if key == "domain":
            domain = urlparse(value).netloc
    url = domain
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url.lstrip("/")
    
    return f"https://www.google.com/s2/favicons?domain={domain}&sz={max(16, min(256, size))}"
    

def get_favicon_www(url, size=64):
      
    parsed_url = urlparse(url)
    query = parsed_url.query

    for param in query.split("&"):
        key, value = param.split("=")
        if key == "domain":
            domain = "www." + urlparse(value).netloc
    url = domain
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url.lstrip("/")
    
    return f"https://www.google.com/s2/favicons?domain={domain}&sz={max(16, min(256, size))}"



def get_favicon(url, size = 64):

    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url.lstrip("/")
        
    # parsed = urlparse(url)
    # domain = parsed.netloc.split(':')[0]
    return f"https://www.google.com/s2/favicons?domain={url}&sz={max(16, min(256, size))}"

    

def download_convert_favicon(favicon_url):
    try:
        headers = {'User-Agent': UserAgent().random}
        response = requests.get(favicon_url, headers = headers, verify = False, timeout = 10)

        try:
            logo = Image.open(BytesIO(response.content))
            logo.verify() 
        except:
            print(f"Invalid image file: {favicon_url}")
            return None
            
        logo = Image.open(BytesIO(response.content))
        logo = logo.resize((64, 64), Image.LANCZOS)
            
        byte_arr = BytesIO()
        logo.save(byte_arr, format = 'PNG', optimize = True
        )
        favicon_data = byte_arr.getvalue()
        backup_favicon_data = favicon_data
        no_logo_byte_array = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00@\x00\x00\x00@\x08\x06\x00\x00\x00\xaaiq\xde\x00\x00\x1f\x00IDATx\xda\xcd{K\xafe\xd7q\xdeWU\xeb\xb1\x1f\xe7\xdcWw\x93\xecf\x93\xb2i\xeb\x11\xd9`\xe20\x80\x15\x8f4\xf0P\x13\x0f\xa4\xfc\x80\x00\x1e$\xc8 \xc8\x0f \xf9\x0b2\xc8\xcc\x80\xff\x808\xf0\xc0\x06\x0cdDe\xe0\x08H\x08\'r`K\xb2-\xdb\xad\xe6m\xb2\xfb\xbe\xcfc\xef\xbd\x1eU\x19\xecsow\xb3[\x94\xa8\xc4\x80o\xe3\xf4\xf3\xf69{\xd5\xaa\xfa\xea\xfb\xbeZ\x8b\xf0\x05\xbe\x88\x00\x80v\x7f2\x98\xe1\x9f\xc4\xd7\xd3\xe7\x9a\x1f\xe8\x8b<\x17\x7f\x91\x0f\x9a\xdf\xf8\xfa\xdd\t\xff\xb4\xbe\xbe\xf8\xe2\xff\xbf\xac\xc2\xcc\xe8\x83\x0f>\xe0\xf3\xf3\xb7\xf8\xf8x%\xebE\x92\xb4\xae\xc2\x17\x13\xaf9sJ\x8e\xce\xcf\x06*e$\x00\xa8\x17\x13\xad?\xe7\xfdD\xb2\x01\xc0\x81k\xcc\x1d6v+\xb4\xb6Xx\xd5\x83\xa8o.\xa4\xaeo\x87z/-\xeb\xe1\xe1O\xf4\xdb\xdf\xfe\xb6\x12\xd1\xffS\x1e\xd2\xcf[\xdc{\xef]\x7f\xcf{x\xff}\x00x\xff\xe6\xdf\xbf\xfd\xed\xef\xd2\xb7\xbf\xfduy\x0c\x04\x7f\xfe\xa49\x1fJ\xb7\x1e\xad/\x9b\xd4\xadKm\xc6a\x8ai[\xdd4VI)s\xd6\xc29+\x95B\x04T\xd4\xcf>\x8c\xb2\x11\x99yO\xea\x83\xd3\xbe\x0fu\xd9\xc5\xb2X\xc6i\xb9\xd7\x8c}\x13\xb7\x87\x9dl\x16\x8bv\xeb\xef5#\x9e }\xf0\xc1_\xd6\x0f>\xf8\xce3Ax\x17\xef\xbe;?/\x00\xbc\xf7\x1e\xec\xf3\x82\xe4>/\x00\xf3\xe2?\xe4{\xf7\x96\xf4\xd1G\xf7\xf0u\x1c\xd3_\xe2?\x10pE\xf7\xef\x1f\x11\xee@\xfe\xe6o\x1e\xc5\xf0\xda~\x97\xc8\xed\x99\xe9-\xe2rK\x89n3\xb0\xe7\x98\x17\xea\xd1TUo$\x0e\x19B\x04\x16QV\x10D\x9f\xadC\x06\x11\x94\x18\xea\x85kh\\\x89\xdeg\xe7x$\xe1\xb5\xaa]\x19\xe1dkzJ\xb9\x9e\xbaO\xb6W\x9f\x9c\\nq\x07\xd3\xfd\xfb\xff\xb1>|xf\xc0\x9e\x01\xb0G\x8f\xee\xd9;\xef|\x84\xe3\xe3\x95\xbd\xf7\xde7\xf5\x99\xba\xfdb\x01\x00\x80G\x8f\x96\xf4\xf7\x7f\xbf\x92\xedvM\xee\xed\x05\xbf\xe5[\x17\xf8\xae\xdb\x7f\xadsl5\x9c\xac\x86\xbea;\xe8\x84n\xa5j\xf7\xb4\xea\xebFv\x8f\x19\xb7\x9d\x93\x033[\x18\\$&\xcf\xc2N\x8aJ\xad\xcc\xd5\x9e\x82(A\xc1,\x10\x862s\xf5\x9e\x8bw\x92\xbd\x97I\x9c\xac\xcd\xec\xa2\x14=\x19\x87\xe9\xb8$\xfax\xda\xd6\xe3\xc1\xcai\xba\x1a/z\xab\x9b\xd7\x7f\xebKiq\xf7NI\xcae\x91\xa5\x9c\x9f\xaf\xf5\xcf\xfele\xf1w\x96\xf5\xee\xf1\xe7\xaf\xef\xf3\x03\xf0>\xf0\xd1;\x1fa\xb1\xf8\nBP\xde\xdb\xeb\xc3+G\xb5umh\xfbel\x88l\xb1\x1e\xa6\xfdI\xeb\xed$\xee\x15\x08\xddg\xc6\x9b\xa8\xb8/\xccw\xc8\xe1\x16\xb3\xdf\x0b\x81E\x95P\x95P\x8a\xa1T\xa0j\x85\xda\\\x83\xcc\x04\'\x02\'\x80\x08A\xd8@d \xab\x95\x04Wf8\x9d\xa6\xfc$\xa7r\xa0\x86\x85\xa9\xf5S\xc9\xfb:\xd9I!\xbb\xbc\x7fx\xb0>\xec\xda\xb1\x0ci\x18\xcfd\xb8\xb8\xd8\xa4\xc7\x8fQ\xd7\xff\xe7#|\xeb\xa3w~q\x0cx\xb6\xe6\xe7\xday\x8f\x80Gr\xff\xfeW\xdd\xab_\xcb\xe1\xcb\xb7o\xf7\xfda\xbf/A\x0e*c_3\x1d\x82p\xc4\xc0\x1d\x11\xba\xe3\x1d\xdf\xf3^\xee:\xa1\xd7D\xf8\xc8y\xb7\x0cM\x07f\x0f\x03\xa3T gC.\x8aR*\xd4\x0cD\x04/\x84\x10<\x9a(\xf0^\xe0\xc4`\xa6H\xe3\x88\xf5z\x8da\x9aV)\xd5\xb3:\x95OR\xae\x8fTq\\M\x9f\x10\xd1\x13\xefp\xc6\x11\xe7"\xee\xb2\xe6z\xb1Y\xd9\xe5\xc9\x83\x07\x9b\x1f\xfe\xd0\xa7\x87\x0f\x7fT\x80\xbb\xd5\xec=\xc3{\xa0\xf7^\x82\t\xf2\x99\xaag\x00|\xef\x1e\xf8\x8f\xff\xf8C\xfa\xde\xf7\xfe;\x03\x93xo\xfeKo\x1d\xb5w^\xb9\xbd\xbf\xb8\xd5\xdd\x8e\x8d\xbb\xeb\x88_7\xc5\x1b\xd5\xf4\x8dZ\xca\x1bf\xf4\x1a\x0c\xaf\xb0\xe0\xc8;\xe9ct\xb1i}\xe8\x17\x11]\x17\xd1\xb4\x0e\xb1\x11\x84\xc0\xf0\x01\x08\x81\x10#\xa1m\x18\x8b\x85\xc3\xc1^\xc0\xe1a\x83\xc3\xc3\x88\xfd\xfd\x88\xae\x9b\x03QJFI\xb9L\xa9\xe80d\x1e\xa7\xear\xd6XU{q\xd2\xfa M\xd3\xc6\xb0\x88Ab\x1bTL\xcb\xc9z(\x0f\xff.\xd7a\xf8\xbe\x01\x11\xc0\x92~|\xefWx\xb5\xfa\x90>\xfc\xf0W\xf0\xbd\xef\xbdo?\xb3\x04\x1e=\xfa\x88\xce\xce\xf6\x18\x18p\xff~\xcf\xdbm\xf4\xaf\x7f\xe5\x95\xa6o\xdc\x92\xbd\x1e\x12\xd9+\x00\xbdnfw\r\xf6*\x19n\x9b\xd1\x91\x01=\xd8z&\xea\x82g\x8e\xd1\x95\xae\x0bc\x8c\x16\x9b\xc6\x88\x05P\x03J\x05J!\x94LP#\x10\x00\x1f\x08}KX.\x19]\xeb\xe1\x1c!\'B`1\xad\xcdTK*)UN\x8e\xba\xaa\x02U\x8b`\xec\x8b\xe3%3/\xd9\xac3h\xa0J\x06\x95\xd27}}\xfd+\xd9\xecGoS\xd7\xb9|v6\xe8\xd9\xd9_c\x9a\x96z\xf7\xee\xcf\xc1\x80\x8f>\x02\xfc[\xff\x8b\x97\x17#\x7f\xedk\xaf:\xd5\xa6\xe9o\xf5\xcbf\xcf\x1fY\xc1\x9da[\xee\xb2\xe1\xf5jv\xafV}\xcd\x80[\xe2x\xdf\x0b\xc7\x18\x9doZ/m\x1b\xa8\xef\x83\xf6}LM\xef,x\xe7\xc41\x89\x13#\x00\xaa\x8aZ\rj\xd5\xcc\x00\x11\xa6\xbe\tX\xee5X\xf6\x11"D%\xabu\r\x17\'\x92MM\x01\x11\xe7\\3\xa5\xe2k\xd5\xaeV\xdd3\xe2\xce\xac\xb6\xe3T\xfd\x94\n\xab\xa1\x96b\xb9i\xbd~\xe9\xfe\x01n\xb7\x9e\x98G\xfa\xe1\x0fO\xca\xea`\xad\xf9\'o\xe9\xb7\xbe\xf5\xb9<\xe0]\x06\xee\xc9\xdbo_\x85\xbd7\xfap\xff\xd5\xd0v!.\x83\xef\x0e\x93\xd6W\xac\xd6\xd7\xab\xd1\x9b {\x03\x86\xbb$\xfc\x8as|\xe8\x03\xf7M\xf4\xaem=/\xba\x80\xbe\x0f\xda\xb5\xde\xda\xdeS\xd3x\t\xc1I\x0c\x0e\xb1\t\x16\x82\xc0\xf1\x9c\r\xaaj\xb5V\x18\x88\x9a\xe0\xb0XF,\xbb\x08\xef\x85j\xaeXoR=9\xd9\xd4O\x9f\xac\xec\xfc|\xa0\xf5z\xe21\x15\xa4Tt\x18K\x19\xc6\xbc\xd9l\xa6\xf3i(\x8fS)\x8f`\xf6S2<\xf0\xd1}\xdc\xb5\xfc\x18\x03\x9f_\xa4\xab\xd5\xc3O\xd3\xf0\xd7?\xdd\xa4O\x7f\xb0\x97\x80\xe3\n\xbc\xaf7\x19@3\x91\x86\x99\xedH\xce\xb7i\xbd~\xcb\xdd\r{M\x1f\xfb\xfd\xfd\xbdx\xab\xb2\xbc\x82\tw\xc7\x01\xf7\xb5\xd6\xfbU\xed\x9e\x08n{\xe6\xc3\xd8\xc8^\xd7\x86\xa6\xeb\x03\xf7]\xa0\xbe\x0b\xd6\xb5AC`\x0bA \xc2,\x8e\xc9{A\xdb8,\x17\xd1\x9a  b\xd4\xaaH\xb9@\xd5\xe0\x84\xd1\xb7\x01]\xe3)F\x07SC\xf4\x8e\x85X\xbcs\xd8[v4\x0c\x89\x87)\xd1f\x9b\xedj5\xea\xd9\xd9Vr\xaa\xd8\xae\xb3MS!\x80-:A\xe3=\xf7}p\xd6\x91\xa3\xb3\xca\xe7\xa1ZZ\x9f(\xb0\xce\xd7Dn^\xb7\xbd\xac\rv\x1cn\xed;\n\xe8,\xc8A\x01\xbd\xea \xf7\x98\xea}az]\x99\xee\x12\xe1\x8e\xf3\xbc\xdfDYt]\x88\x8bE\xf4\xcbeD\xdfEt\x9dG\xf4\x8e\x9d\xb0\x91\x00\xcc\xc4\x84\xf9\x87cF\xf0\x0e]\xe3!"\xa8\xaa\x96\x92C)\x95\x98\t\xc1\t\x82\x17D/`\x02\x82\x130\xb3\x86\xe0\xb1\xdc\xcf4\xa5B\xc3\x98p\xb5\x1a\x11O\x9d\xa8\x9am\xb6i\xe16I%1\x99\xc1\x98@\x0c0\x19X\rT\x83T\nH\xed\xad\xfdt\xfe\x93\x1f\xf1\xcf\xe5\x01\xf7\xef\x1f\xd1\xbd\xd7:\xd7\xc7\xd8(x\xaf$\xbd\xad\x92\xef\xaa\xd9=qt\xd79\x7f\x87\x98\x0e|\x94\xaek}\xe8\x17A\x16\xcb\x88\xbe\xf3h;\x8f\xb6\xf1\xf0\xce\xed\xe2k`~*\xa4\xcc\x0c\xa63\x01"\x02\x84\x99\x9c{\xca\x05D\x18\xc2\x04a\x02\x13A\x02\xc0$\xe4\x83G\x97+MS\xc1f\x18!\x8eP\xabb\x18\xb3\xac\xd7)\xe4T{&P)j\xbc\xd3\xa9c*\x15\xc6I\xc1\xeb>\xc6\xab7^\xeb\x1c\x7f\xe3m\xfa\xb7\xdf\x7f\x96\xcc\x03r]\x02 \xe0\xddw\xdf\x957\xde\xf8\x97\xa1\xdb\xeb\x16\xde\xf1\x91*\xdf\xad\xb5\xbe\xa1\x8a7\x88\xe9\xf5\x18\xdd\xab\xfd\xa29\xda[\xc6\xe5\xc1A\xd3\xec\xefw~\xb9\x8c\xae\xeb#\x9a\xc6!\x04\x8f\x10\x04N\x18\xc4DD\xb8\xfe\t\xcc\xf3\xe2X\x18D\x80\x9a\xa1\xaaAwlH\x84\x11\x1c#x\x81w\xf2\x8c8\x02y\xcf$"\x00\x01U\x15\xa5\xee@\xb4*\x03D"\xc4\xde\x89\xf3N\x04\x0c13dUMYS5\xdbz\xc6f\xb9\xbf\x1c~\xeb\x9f\x7fy\xea\xbf\xf9+\xf5{\xff\xed{J;\xf8sfvC\x82\xfe\xf4O\xffT\xfe\xf6o}<>\xa9\xfd\xe9\xe5\xea`3\xd4[\xb5\xeam\x15\xdci=\xddn[\x7fxx\xd8\xee\xed\xed\xc5\xa6\xef\x82\xf8\xe0XD`0\x10\x0c\xcc\x04\xd83\x92\x94\x08\xd7\xf1\xadU1N\x05F#R*\xf0\xbb\x85:\'\x08\x9eA2\xd7\xe5\xcd\x86|F\xb3\xcf\xeb\x9f\x03\xa6j\x10\'X.\x1b\x10\x91\xebZ\xc7W\xcb\xe0./G\xbe\xb8\xd8bu9\x95\x94\xcaX*\xae\x84\xf8\xacm\xc3\xf9\xed\xfd\xe5\xd5\xaf\xde\xee\xb6\xbf\xf6k\xbf\x9dM\xad^\x93\xa1\x9b\x12\xf8\xce\x07\x1f\xf0\xbf\xbb\xf3u\x1f\xf6\xc6\xbe\xdf\xac\x0eV\xdb\xed\xad\xf5:\xdf\x99R\xbem\xc1\x1d\xb6\xf0{]\x17\xba[\xb7\xfax\xe7v\xef\x96\xcb\x86\x98\t\xb9\x18\x86!!\xa5<\xefj\xd5\xdd\xda\x19\xcc\x80\x81@\xb0\xdd\xae)\xc6\\\xe0\x98\xe1\xbd\xa0\t\x0em\x17\xc0\x14\x10\xfc\xbc\xc3f\x065\x80?\x13\x07\xad\x86i*\x18\x86\x8cq\xccPU\xc4\xe8\x11\xa2\xc3\xde2\xf2\xa2\x0f\xe4Eb\xce\xb5[\xad\xa7\xbd\xb4\xad\x87\xb9\xe8\xed\x18\xfcy\xf0\xe1\xfc\xa8\x8dWaO\xb6m\xfb\xe6\xf4\x9d\x0f>(\xc0,Fo\x02\xf0\xbbo\xbd\xc5\xc7?\x1a\x1b\xf2\xb2t\x81o\x89\xc8\xab\x80\xbe\xaaU\x8fTu\xe1\x98b\xd7x\x7ft\xd0\xcak\xaf.io\xd9\xa0\xaa\xd9z\x9dPJA\xcedV\x15E\x8d\x00\x10\xf3\x1c\x04"@u\x97\xba\xa5\xa2\xaa\xcd\xe4\xc7\x0b\xfa.\x80\x85\xd1F\xff\x8c\xb3\x03\xa8\x1a\x88\x9f7bR*\x18\xc7d\x9bm\xb2a\xc8\xa8j\xd4D\x87\xa6\xf1\xe0E\xa0\xe0\x85\xa6T\xe4\xfc|\xe3\x998\xd6\xa2\x0b-z\x84\xa0\xaf\x8a\xc8\xa5\x0b|E&\xab\xe3\xe3q\xfb\xbb_}k\xfa\xe0\xb3\x018\xfe\x8b\x95\xdcc\xd7M\x93?*\xaaw\xc1t\x9f\x89\xee1\xe1\x16\x03\xbdw\x1c\xba\xde\xf3\xc1^Cw\x8ez,\x97\r\xa6T\xa0\xd5\xb0Z3\xcc\xe6\x07g\x02\xcc`DDDsZ\x9b\xcdi\x9bKE\xca\x15f@TE\xf0\x02\xb3\x9d\x18r\x02\x11\x06_\xc3\xa7=\xc5&5C\xa9jS\xaa\x18\x87\x8ca\xcc\x00\x011\xcc]#\x04\x072`\xd1\x06\x8a\xd1\xb30\x05!\xee\x95\xf4\x16\x83\x13\xd8\xb6E\xf3zL\x9b+\x9blu\xfc\x17e\r ?\x17\x80\xc5I\x92sG}E\xbd\x93s\xb9\x0f\xb5/\x89\xc3\xeb\xc1\xbb\x83\x18\xa5\xed\xda\xc0\xcb.bo\x11\xb1\xbfl\xd1\xf7\x01"L\xabu2f\x82\x99\x91\xed\x9e\x9b\x88\x88w\x8b\xa7g,+3\xcc]\xe0\xba\xb6\x99\xe1d.\x87k\xf0\x13\x06\xe6\xc6\xf9\xd4\xef\xabF\xa8\xd5(\x17\xb5\\\x14)\x15baT5\x00 \xa1YM\x86 \x88sVp\xd3\xb8\x963\x1dy\xc7\x0c\xb5<Mu}\xb1\xd9\x9e\x05\xe0dqe\xf2B\x1b\\\xaf\xabd\xbf\xe9Y\xfcQ\xcd\xf5\xae\x11^\x8f\xc1\xbf"\xacM\xdb\x06Z.#\xed-\xa3.\xfb\xa8mp\x1c\xbd \xe5\n\x02\x91\xd9\xbcK\xaa\n&\x9eq\x8cf@T\xd8\xdc\xfev\xado\xd7!\x10\x83C\x13\x1d\x9a\xe0\x10\xbd\x83w\x02\xefv\x8c\x81^p\xa6\xa03\xb8\x92\x9a\x01Fdj\xa8\xd5\x90\xb3\xc2I\x9d?[X\xdb\xe8\xb5\xef\x03Mc\x0cS*^\x84\x83\x11\xe5)\x97\xb3\xb4\xe1\x87\xab\xac}\x87\xb3\x17\x03pq\xd1\xb2-V\x8d\'\xec\x03v\x07\xa0;\xb1\t\xfb-\x11/\x17\xa1\x1c\xec\xb7\xd8[\xb6\xdauA\x9d\x135\x03\xcf\x88\xac\xbb\xd7\\\xeb\xcaOk^A\xbb\xc5\xcf%\xc0\xccp\x81o\xea\xbf\xef\x03\xda\xc6!\x849\x13\x98>\xcf\xee\x9c[\xa5w\xb3d6\xcc\x9c"\xa52w\x87b\xcaD\xda\xb6^\x0f\xf6\x1b\xb2jn;\x16W\xabF\x85\xa6i*wl\xc2~\xd1\xda\xa4q\xc1/\xc9\x80\'L$!pY\xb0\x93\x03\x11:l\xda\xa6\xeb\x1ag{\xfb\x91\x8fn\xf5u\xb9\x8c\x1c\x1b\x7fMc\xad\x14\xa5Zw\xbb{\x03bsPPh\x97\x15\x06\\\xd7\xf9\x0e\xf9\xbb6`\xb9\x98\xcb\xa9\xef<\x82\x9fS\xff\xf3lo\x11F\x0c\x0e}\x17`f(\xa5\x02L\xc8\xb9BU\xcdt\xc6\x8b\xb6\x0b|x\xd4\xc3\x89\xc8jS\xfcf\x93h\xb3\x1d\x0f\xa7)\x1f\x14\xad\x8bR\x10d\xb8|1\x00\xa7i\xa0\xf6\xc2\xf9\xd2\xfa&\x04]\xb4mXt}\xe7\xf7\xf7\x82\xdd:\x8at\xeb\xa8+{{-\xbcw\xac\x00\xd5b\x94\xb2>m{\x0c0\xcf\xf9k\x06T\x9d[\xa2V\x05\x88\x10X\x10\x83\xc3\xde\xa2\xc1\xfe^\x8b\xe5"b\xd1y4A\x10\xdc\xcf\xde\xfd\x19+\x80\xe0\x19}\xebQk$f\xc28fL\xb9"\x95\x02K6\xa3\r\x83\xfb\x85\x17q$M\xf0\xce\xc7\xec\x80\x89\xd6\x9bq\x91\xa6\xba\x18si\xca\x90}B\xa0\x17\x02p~>R\xe9#+\xd4\x9b\xf9&614M\x8b\x83\xfd\x96\x0e\x0e\xbc;8l\xb1XFu^HM)\xe5\x8a\x9c+J\xd5\x19\xc9\x89\xc0\xbc{\xc9\xfc\xfej\x042\x02\xd3\xcc\xf0\xba6`o\xaf\xc1\xe1\xfe\x1c\x8062\x84\x19\xcc3W\xb8\xf1\x08?\x03\x02L\x04\xef\x18M\xe3\xa0\x1a`;\\\xc8\xa5"gE\xc9\x15"L\xb1q\xd4v\x81\x9b\xc6s\x08\xc1\x91T\x1aF\x86\x19\x85i*\xcdvH~\x1a+o\xa7B/\xd5\x02\xe3P\x98\xcc\x1c\x13;\x03\x93\xf7\xde\xda.\xd2r\x19\xa9\xef#\xb7\xad7\xe7\x18\xa63\xb3\xcb\xb9\xa2\x94\x19\x03\xaeQ\xdd;\x86\xf7\x0eD4cC5\xb0\xcc\xbb\xb7\xec#\x96\x8b\xe6f\xf7\x9fK\xfb\xcfq\xf7\x99f\xaf\xd0\xef:\x86s\x02f\x82\xaa!\xa5\x8a\x9c\x0b|ph\x99\x11[OB`\xe7\x8cr\xa9\xf0>\x19\xc04\xa5\xea\xb6\xdb\xec\xd2\xa4\xfc\xec8\xe8&\x00\x97e\xa4\xbe:\x16\xf1\x92\xb38S\x02\xb1\x90\xf7\x1e1\xce"\xa7\x89\x1eN\x18\xd5tnSfP\xd3g\xc4\r!D\x87\xae\tpN\xe6a\x95\xcd\xe0\xd7F\x87\xbdE\xc4\xa2\xf5h\xa2{i\xcd\xdb3c\x9d\x17\xb3\xe0\xba\x95\xce\x183\x13\xab\x9d.P\x83\x07\xe0\x1c\xa3\t\x0e\xde\xcd\x04,\x86\x0c\x11Gj\x84\x9c\xaaKS\x96q\xcc<&\xbc\x98\x01z\x99\xa84LS\xce\xd2\x14\xefT\x01\xb3Y\x959\x11\x04\xef,\x849xd\x04\xe7\x08\xc2\xd7\xa9\xbfSs\x8e\xd1D\x8fE7\x8b#\x11\x06a.\x8b\x18\x04m\x1bv\x7fO/\x1d\xbb\xd9\xb3S7\xc3\xf3\xed\xd0\x80\xa2\x86\x94\x0b\xa6T0Me\x06\xc0\xaa \xd0\x9c!\xee\x86OX\xce\x06\xe6\n\x80`J(\xb5\xba\x9c\xab\x94\xa2\xa4\xf5%%\xb0\x06\xe0-S)\x81JU\xaaz\xbd#s\x10\xbc\xb0\xb99Q\x8dd\xaeI\xbf\x132\xc1\x0bj5\xb0\xa3Y\xcfG\x87\xb6\t\x88\xd1\xc1\xc9\xdc\xe2\x82{Jx\x98^2s\xa4\xdd\xbaw\x0c\xf0E.0S\xe9)\x15\x0cc\xc60eL\xb9\xa0\xaa\xcd\xd2\x99\x19\xde\x89y\x11\x13a#\xd4\x9d\xfc\xbe\x01d*\xaaTJ\xa6\xf5\x86^\xee\x07\xa4\n\x84Z\xaf{\xbb\xed\\\xeb\x9dF\xe7\xe7\xda\x92\x13F\x08\x82\xb6\xf1\x98\xd2.\xd2;\xf6\xa7\xbb\xde/;\xc2\x13\xa3C\xf4\xb3\xef\xff2\xb4\xbf\x9e\xee^\xd3\xe6\x97\x08B\xa8\x02\xa5(\xa6T0N\x19\xe3X\x90RA)z\x93\xf2\xbc{\xdd\xfcw\xc5\xcdZ\xaa*j\x05\xa6\xf2\xb3\x0c\x91\r\x80E\x81\xaa\xa0\x9a\xc1@F\x00\x84\x19\xce1\x9c\x13{\x16\xaaX\x081\n\x16\x8b\x00\x05\x81E0\xa5\x023`\x9a\xca\xd3 y\xb7\xcb\x80_t\xd4M/ \xe2\xb5\x99\xa2;/ \xe7YS\xa4\x1d\x06\xc8L\xc5w\xed\x98\x8c\x89\x8dP\xed\xfa\xff\xaa\x91\xe9.\x18\xa8\xf5\xb9e?\xf7X\xa5<\xfb\xd1t\xe3\xd28\xe1\x17\xea\x96i\xde\xdd=\x10\x98\x1d\x84\x19W\xeb\t\xe38\x8b\x95R*\x08\x80\xf3s\x96 \xc8/3z\xc6u\xd4o^\xf6|\xd303\xd8\xcbZ\x88\xbd\xfc\xf7\xf5\xf3,\xb1\xd9\x9e\xa29\x95\xd8\x88\x99\x88w.\xce\x0e\x9a\xe8\xd9\x9d\n\xc1\xcd*\xce9\x00\x84R\x15)\x15L\xb9\xa2\xd6\n\'\x8c\x18\x13\xba\xe8\xe0]D\x13~\x81\xe3\x08\xf6\xdc\xa7`v\x14\x9ev\x19\'<\x9b(N\x90\xfd\xdcif\x11\xc5s\t\xc1H\xcd\xc8`\xb3\xe3A\x98\xc7l<\xb7i\x11A\xc9?#\x00\x02\xccu\xca\x0cf&\xe6\xa7\x0e\x8d\xbe$\xc8\xd7\xfe\x1d\t\xa3\x94\x99\x97Oc\x99\xe7~unU\xd3\x94\xb1\xde&\x80\x80R\xe6r\x10~\x16\xe5v\x8e\xd4\xce8\xb9\xee\x1a\xcc\xd7\xc0HOu\x80g4\xd1\xed\x18\xe1\xec@\xe5\\\xe1\x84\x10\xa3\x83\xf7\x02\x9e]\x98\xe7\x8c\xffy-\x0c\x91\xcf\x19\x8e.\x00\xb8\xe8M\x9c\x98\x13\xb2\xa7f\xa6\xa1\xa8"\x95J\n!\x06\xe8z\xa8\xf9\xd4[\x07\xdaF\x90s@-\x15\xce\x03%\xcf\xc3\xcf\xaa\x8a\xcdvB\xa9\x15\x83w\xf0\x9ew\xa0E7<\xe1z\x8be\'\x8f\x83\x178\xa2\xe7\x00\xd3=\xa7\x05\x00\xe7\x04]\xeb\x90\xd2\x9c\xd4M\xe3\xe1\xbd\x103Q\xadF\xd7@L;\x0e\xe1\x84\xcd9\xb6\xa6\xf1\xe6\xa5\xbc\x18\x00\xde\x0b\xe6\x1c,z\xa9\xde\xb9\xc24\x83N*\x15\xe3\x941\x8cBm#\x98}G{\x81\xa8x\xc7\xe8w\xec\xaeO\x1e)\x17\x0cS\xd9\xa1v\xc1\x98\x9eZa\xc1\xcf\xf4\xf7\x1a\xdcfP\x9d\x17\x1e\x83\x87\x1a\x10A\x08\x9e\x9e\x0bt\x0c\x0efs\xcawm\x98\xf9@*\xa8\xd5 \x8egc\x84\x08\xb9\x16\xca\xa5"\x97\x025\x05\x93\xc1\x8b\x14\xef\xa5JV3\r/\xce\x06\xf7\x0f\x1a\xf3\x0c\x8d\xd1U\xef\xa5\x10\x14\xa5d\x1b\x86\x89\xd6kC\xd7\x10\x9a(\xe8\x1a\x8f\xe0\xe4%\xe5\x00\xb4q^\x9c\xaaG\xce\x15\x97\xeb\x84\xcb\xd5\x80)\xa5y\xa7\x0c\x107w\x15\xa6\xa7R\x19D;\xbcph\xa3a&a\x80\xd9.X\xf44\x0b\xba\xc6#\x067{\x01\xa5bJs7\xd0]&\xd5\xaa\x18\xc7\x8c\xcd\x900N\t\xb5d#R\nAJ\x13}\x85\x8aZ\x87\x97\x0fG\x9b\xd6i\xdb\x86\x12\xa2\x14@-\xe7L\x9b\xcd\x80\xcb\xcblM$\xed[g\xc11\xa2\x93\x9b\x12\xbe>8E\xcf\x88!`N\xd7R\x81)e\x0cc\xc5\x84\x8aR*R\xa9\xb3\xedE\xd7\xee\xd0u\x00\x04\xb9(j\x99\x89K\xa9\x8aR\x1dJ\x99k\xdf\xedD\xd3\xf5\xcb; FA\x0c\x8a\\\x15)W\x8cS\xc16e[\xad\'\xbd\xb8\xdc\xf2j\x95)M\x99\x00\xb5\x18\xa4\x14\xf5\x85Pu;\xbd\xa4\x04\x0e\x0f\x1bk\xc5il}\x0e\x81G&K\xe30\xc4\x8b\x0b5\xe1P\xa2\xa7\xd2\xb7\x1e]t\xd65\xfe\x86\xa8>\xe5\xef/\x96\xc5\x0cX\x01S6TU\x0c\x06\xe4\\1\x95\x19$\xafu\xc4\xdcngi]\xf2\xbc\x989\xbd\x1d\xda\xe8n\xbc?\xefw\xd2y\x97\x12\x84Y&;\xc7 \xc0\xb6\xdbd\xeb\xd5\xa4\xe7g[=;\xdd\xe2\xec|t\xdbm"\x90\xa5\x18\xdd\x08A\xf6\xce4v\xe5\xc5\x0c\xb8\x15Z\xa3\xa5\xe4\xe0hd\x965@\xeba\x18\x98P\x8c,\xe7 T\x97}\xe4\xc3E\x14[\x1a\x83\xe7Y\xc2u\xdfR3\xc8\xec\xb5\xd3\xb3\xb8\xd0\xb5\x1eUg\x9b\x8bh\xc2z\xe7\xe2\xa4\\QUg\x06\xb7Sv\xd7\nsL\x05\xc3$\x18F\x876z\xb4\xadC\x13=\xda\xe8\xa0\xd1Y\xd7\xc8\xb3|\x0fL0&XNE//\x87\xfa\xe4\xc9F?}\xbc\xd2\xab\xabd\xe3P\x88\x0c\xeb&\xba\xb5\x8f<\x16O\xd9\x86\xfab\x00\x16\x8b;*\xfd*\x91\xc8\x1aj\x17\xb9\xea\xf90N.\xa7\xc45\xe7\xe2\x1d\xe1p\xbf\xc1\xf6\xb0C.\n\xe7ff\xf4t\xb8\n\xd4Zw\xf3\x00\xda\xc9c\x9aI\x10\xed\xa6:\xd7\xde>\xe6\xc5\xd6\xaa;\xfb\x9b\x01\x9b\xa7=%W\x10\x15\x8c\x13c\x1c\x05C\xcc\xe8R@\xdf\xe9\xec.\x01\xf0B\xf0\xfe9\x1c\xa2Z\xd5\x86m\xc2\xf9\xe5\xa0\'\x8fW\xf5\xe4\xc9\xban6I\xcd\xa0"8\xf7\xd1]4B\xeb\xdcZ"9\xd2\x17\x02pp0h\xf6\xcd\xc8\x82\xcb\x9a\xeb\x93<\xd4\'iLaTm\xb4Tj\xa2\xc8\xc5\xd5\xc8\xebm\xe2\x94+7\xd1?\x97\xf2\xf3\xd4f\x16-\xb6\x13P\xb4\x03\xb7&2rQ\x04\x9fv>\x81\xa1\x94\x99\'\x08\x08B3\t\xd1\x99\xb7\xce\xbff\xba\xe9 )\xcf\xdf\xcb4/\xbe6\x0e\xfe3T9\xe5\xca\xebm\xe2\xcb\x8b\x81\xcf/\xc7rq\xb1\xad\xd3T\xb2\x13\x1a\xbb>>i\xa2<q\x91/c\x95\xd1\xbb\xe1\xc5\x00,\xd6R\xeb\xfd\xb01\xc2\xe9@\xe5\x98\x86|8\xa5\xe2s\xaa\x07\xb5j\xdb\xb4\xbeY\xad&^\xad\'\xde\x0e\x05MS\x11\xe7]\xb09\r\x19Fj\xaa\x06\xabF\xc63Q\x9aS\x1f\xcf\x10\xaay\xf7K\xdd\x19)\xc4\x106\xf0\xee\xb4\x88>\xf3=\x9a\r#\x15\xe42\x9ft\x0bNl\xd1\x06\xb3\xe7\x8f\x83R\xa9\x8aa,Xo&^m&^o&\xdbl\xa7\x94S\x1db\x94\x8b\x9e\xe2\xc3\x10\xfcq\xdb\x86S2l\xe4\xa1\xd5\x17\x02\x10\xde\xfc\xd5\xe2^\x99\xd6\xd3\xea\xf2\xa4T}\x08\xd8\xa2\x14\r9W5\xe0h\xd8\xe6p\xb5N\xb8\\M\xb8\\\x8d\x88\x8d\x808Zx\xeal\xdc\xb0t\x9b\x7f"\xb5Y\xaa\xea\xceA\x9a\x07\x9a\xf3Pt\x9e\x12\xdbs>\x00\xed\xbc\x05\x9b\xc5,\xea.K\xcc\x0c\xc1\xb3\xa5T\xe6\xb2\xc1sXc\x9b1\xd3\xe5z\xc2\xd5z\xc2f\x9b0\x8eYs\xaeC*\xf5\xcc9~DD\xff\xe0\xa3{\xd8w\xeeD\x96\xfb\xeb\xc2\xb1\xbc\x10\x80\xb7\xdf\xfer}p\xfeW[\x96\xeet\xdc\x96G\xa6\xb6P\xb5N\x15A\xd5b\xce\xdan\xb7\xa9=\xbf\x1a\xed\xe4l\x03\xe7\x19 \xc2\xa2\x0b\xb8\x0e\x82<\r\xc6\xcd1\xacY\x85\xcd\xee\xb0\xc1n\x1c^\x11\x06)v\xa5\xf2T\x0e?K\xbdkU\xe85\xce\xceM\xc6\xf83rb=\x16\x9c_\x0cxr\xba\xc1\xf9j\xb4a\xccZ\xd5\x12\x08\x1b\x10\x9d\x1a\xd1\xc7\x80>\x14\xe1G\xfdAw\xea\x9cl\xdf|\xfb\xcb/f\xc0\x87\x1fB\x7f\xe3\x9b:\xad?)\xab!\xebi-u\x8f\x88\xf6Ex_\x84\xf7\x8a\xear;\x94|~1\x84\xa6Y\xcdV\x0f\x88`\x84E\xeb\x11\xfc\x8c|\xf2\x12\xaf\xab>\xe3\xe9\xcdd\xc7\xc3\x14(\xb5\xde\xa8\xce\xebR\x99\xdf\x83@`\x109\x045\xf8\xe0\xd0u\x01M\xe3\xc99!\x03\xa1TC*\x8a\xd3\xf3\x01\x8f\x1e\xaf\xf0\xe8\x93K;?\x1b\xeav(\xd9L\'\xe7x\r\xe0L\x98>\xadf\x9f\xe6\xac\xa7T\xcb\xaa\xbd\xa3\xd3\x87\x1fB_8&\xf7\xe1\x87\xef\xe1/7Op\xf6\x93\x81\x1e\x9d\\\xb8q\x93\xbd\x19\x1aa\xe9\xc4s+\xcc\xd1\x80\xa0\xaa\xae\xd4\xca\xa5*\x99\x11\xb1\xcc\xdc\xdey\x81\xfc\x0co\x9b\x98\xe6\xd4\xaf3\x92\xcf\xe4\x8f\x9ey\xcd\x05t\xc3\xdf\xaf\x1d\x1e/h\x1a\x8f\xe5"\xe2`\xaf\xc3\xfe^3\x0fT\x991N\x05\xa7\x17[|\xfc\xe8\x12\x0f~z\xa6\x0f\x8f\xaf\xea\xe9\xe9v\xdal\xc6u.zN\xe0\xc7\xcc\xfc\xb1x\xff\xc0\xd4>N\xa2\x8f\x9b\xa6\xb9\xd8\xffj\x1c\xfe\xfdw^\xa9\xef\xcf\x07\x9f\xe1\x9eI?\xfb\xeew\xbf[\xbf\xff\xe7Hl\xeb\rk\xbc\x8c\xde\x9f9\xc1\t\x11\xed\xa9Z3\x0c\xc9\x95\xaa\x18\xa6\xa2\xe3TB)\xe6\r\xe6xg\x90\xec/\xe2KO_\xcf\xc7]f\xc3\xb2o\xc3<\xfd\xdd\xb5\xcbq\xca\xc8\xa5\xde\x8c\xcf\xb13R\\\x98\x0f\\\xb4\xad\xc7\xa2\x0bX.\x1atm\x00\x11c\x982\xae\xaeF<z|\x85\x07?\xbd(\x0f\x1e^\xe4\xc7\x8fWi\xbdMkM\xf5\x1cd\'!\xc8\x13\x03\x9f\x94\x8a\xb3\xed\x94/\xd7\x8f\xebF\x9f<Ho\xec\xbfR\xe97\x7f\xd3\xae\x8d\x17y\xf6\x12\xc4\x07\x1f|@W\x8f\xbe\xc1\xab>\xbbC\x17|\xbf\x8c\xa1\x0f.8\xc7\xaeV\x95i\xac<L\x99\xa71s\xceJ\x060\x0b\xb3\x13aq\x04\xbe\x16$\xcf\xdb\x107c^{\x0e\xba\x08z\xdd\xfbw]\xa1\x16\x85\xa9\xce\xa7G\xbd\xa0\x89\x1e]\x1b\xack\x02\xda\xc6\x133#\x97\x8a\xab\xd5\x88\'\'k\xfc\xf4\xd1e}\xf0\xd3\xf3|\xfc\xe8j8;]o\xb6\xdbr\xaeE\x9f\x04O\x8f\xda\x18\x8e\x83\x93\xe3J\xf8ds5\x9e\xfe\xd5\xe3\xd3\xd5\xff\xfe\xde\xdf\x8d\x7f\xf8\x87\xff\xa9\x00\xb0k\xacy\xc1\xa8z\xf8\xf0\xca\xf4n,\x9b\xae\x1doqw\xe5c8Q\xe2@c\x91\xaa\x95\xc6T\x91\x08dD\xe6\xbdH\xdbx\tN\xc4\xa0HS\xc5v\xafA\x17\x1d\x82\x17ca0\x13\x89\xd0nQ\x8ch\x82R=JQ\xa4"6%\x06\xe7\x19Q\xec\x99v2\x0fD\r\xaaf9Wl\xb7\x99\x882\xc6Tpq\xb5\xc5\xe3O\xaf\xf0\xe9\'W\xf5\xe4d\x9d./\xc7\xcdf=]\xaa\xd1\x13\n\xf2\x88\xe0\x8e]\xf0\x8f\x98\xf5\x845_m\xa6i<\xfbd[\x8e\x1f\x9e\xd9/rXZ\x87S.\xe5n\x1aj\xae\x17\x12!F\xd5t7\xea3\xc0\xb4\x82J\xae\xb6\xd9Lrz\xbaa"\xd00&>?\xdb\xd2\xfe\xb2\xb1e\x1f\xb5\xeb\xbcum@\xdb:nZO\xde\tl\xee\x00\xe6<\xc1\xb9\xd9f\x13!\xd0.@,\x045\x90b\xf6\x11\xa61\x1b\x14:l2\x88\xc09\x17\xda\x0c\x99.\xd6\x83\x9d\x9dm\xf4\xe4d3\xadV\xd3&O\xe5B\xd5N\x088V\xb5\x87\n<$\xc2#Q<\xae\xb9^\x94!\r\xc3)\x17`\xab/\x04\xe0\xf9k0\xef\x02\xb8gaqUb\x95a\xb3\xda\xc0C\x14,%\xe5\\\xd8H\x83\'011\x9b\x95\\\xe9\xf2j\xb0Rj\xbd\xbc\xd8\xba\xb6\xf1\xdcw\x01\xfb}\xd4\xfd\xfd\xc6\x0e\x0f{:8\xecdo/J\xd7\x068\'V\xaa\xce\x07%JA\xadfE\x15\xb5*\xd9<H\xdf\x1d\xa0R\x1a\'E\x9aj\xbd\xba\x9ajMj\xa9\x14\x1e\xc7L\xdb!c\xbd\x9dt3\xa4\xb2\xd9\xa4MI\xf5\x9c\x05O\x9a\xc6?\x82\xd9C"<Hc\xfdx\xe3\xa6\xc7\xd0z\xbeYmV\xb1\xca\x10\x16R\x80\xdf5\xe0\xeb\x00\xde\x7fj\xa2>wN\xf4]\xe3?\xf9\x93\x8f\xc4\xbf\xf5\x13\xb7\xbc\x18\xd9\xec\xf8\xe9Q\xd9\xd6\x1f\xf5}\xf3j\x88\xf4&\x0co\x1a\xd1=3\xbc\x06\xc2-2\xec\x13QtN|\x13\x9c,\x16\x9e\x8e\x0e;z\xe5\xce\x9e\xdc\xbe\xb3\xf0GG\xad\xeb\xbbH>\x88i5\x8cS\xc6z\x93\xb0\xdd&\xdb\x0e\x19\x9b1Q.\x15\xbb\t\x1bT\x95\xac\xaa\x95d%\x8d9o\xb7\xb9\x8eC\xb1\xed\x98l\x18K\x1d\xa7\x9c\xab\xd6I\x15\x97l8e\xa6O\x08v\x0c\xe0A*\xf6`s1~:\x96|\xb69\xdd\xac\x98\xc7\x91\xe8^Y\x1d4\x9a\x7f\xf2V\xf9\xd6\xb7\xde\xa9\xef\xbfO\xfa3K\xe0\x9dw\x80\x18\xff\x85\xe2\xb5\xbf\xd1?\xfa\xa3?\xd7\xed\xb6\xd8\xfd\xaf\xbei_\xba\x7f\x80[\xfbK\xee\x17\xceCMR\xad:N\x9aS.CJe\xab\xc5z\x00\xbdw\xd2m\xb71\xa4TC\xa9\x08S\xa9q\xcaJ}_\xe1\xbd`\x0e@\xc10$\x0cc\xc64\xcdS\xde\xfa\x8c\xe9\xa8j(\xb9`\xdc\x8en\xdcf\xdan\xf2\xb8\x1dr\x19\x86)M\x93ns\xad\x1b"\xdbx\xef\xce\x9a \'M#\x9f\x06/\x8f\x84\xe9\xd1\xd5eyr\xba^\x9d\xfd\xc3\xc9\xc5\xd5\xc3\x1f=\x18\xbb\xce\xe5\xdf\xfb\xbd\xb7\x15\xf8uL\x87W?\xff\xc2\xc4\xdd\xbb+\xbbw\xef\x1d=>\xfe\xd8\x1e>\xdc(\xf0#\xa3\x1f7v\xfb\xb6\'\xe4}1\xf1\x8e\x95\x88H\x93\x99mj\xb5\xabR\xf4J\xb3\x1e\x82\xe8\xc8\x14\x18]q\xebmr\xeerh\xc470d\xac6\xb3#k\xd50\xe5\x8ai*\x98RE\xce\xf3\x05\n\x03\xddh\x06SE-\x8ci"\xdals3L\xb9NS\x9er\xae\x9b\\\xeaY\xa9v\xcad\x17\xcczb\xc6\'"t\xe2\x84\x9f8\xc6cp=\xdfl6\xab\x8f\x7f\xfcx8;\xfbA>;\xfbj=:j\xed\xde\xbd/\xd3\xf1\xf1\x8b\xfe\xf9K/L\xbc7\xdf9z\xee\xc2\xc4\xd7\xbe\x96\xc3\xed\xdbo\xf6\xfd\xab\xb4/\x90\x83\xcae\xbf$>(\x8a#\xcb\xe5\x0e\x19\xdd1\xc6=/|\xcf{y\xd5\x07\xb9\xd5\xb5q\xb9X\xee\xa1i\x1b8\xe7\x00\x12h\x05rQ\xe4\\\x90K\x85V\xbb\xb981\xcf\x18gei\xaa(e\xc44l\x91K\xb9\xaa\xc5NK\xce\x8fs\xd1\x8fK\xd1cS=!\x91\'Np\x16=]xv\x97\x8azq\xbe\xb2\xcb\x93\x07\xab\xcd\x0f\x7f\xb8\xfe\x85.L|\xee\xad\xb1wa\xfc\'\xef\xfc\x81,\x16_\x91\x10\xfe\xa7\x0cC\x1f\x9a\xeb+316\xa1\xf5}\x17\x9b}\xe7\xf4v\x14y\xc5\x88\xdf`\xb67\r\xfc\xba\x99\xbd\x02\xb3[j\xd8\x03X\x00\x86*\xcf#\xae\x9d\xf9QUa\xf3\xf9\x89\xddI\xd29\x00L;\xa3\x84je\xa6+\xe7\xf8\x04\x8c\xc7\x0c|\x0c\xc3\x03\xd4\xfa\xd3Z\xeb\xe3M\xc6i\xde\xe4\xcb\x94\xf3\xc6\xa6i<\x1d\xd20V\x19\xda\xb4I)\xfd\xab\xba^\xff\xb8~\xeb\xa3\xdf\xaf\xef\x83\xf4\x97\xbb3\xf4.\xf0\xce\xbdw0\xfd\xd9\n\xdb-\xeb\xa7\x9fn\xd2\xf1P5\xf0j\xda\x7f\xads\xbf\x1e\xde\xb8<\xba\xdd]6-_\xb5\xec.\x8b\xd9&\xe7\xbc\xce\x19\xe7\xe3\x94\xef\xe4\xa9\x1c\x8cSYLS\x8d)\x15\x9f\x8b\xbaZT\xaa*\x9b\xce\xb8O\xb6;\xdd,\x0c\xc7dN\xa4x\xcf\xc5y\x97c\xe0)\x04Y\xb3\xf0y\x08\xf2$zz\x14}x\x18\x1c\x8eY\xcb\xe9\xf9\xc6.?\xb1\xed\xe6\xe1\xdf?\xc9\xabO\xb6\xe5twi\xea\xeeWY\xbb\x0e\x88\xbf\xf3\x0ep\x8c\xe7\x0f\x07\x7f\xd1[cw\x8fWv\xefw\x96\xf5\xa3\x8f\x16\xf8\xc1\x0f\x8e\t8+\xd7\xd7\xe6\xbe\xfco\xfe\x19\xbfvw\xb9m\xc4m\x1b\xefV\x9ba\xbb\x1a\xb7\xee\xf4\n\xe9\xa1\x94\xb2?\xaa.r\xd2f\x18\xb3\x9f\x86\xec\xa6T\xa5\xaar\xa9v3\xbd\xe0\x9d\x0cv\x8eQ\x99\xacx\xadf\xae\x02T<#\xab\xe7\x91\x18+\xe7\xdce\x888\xdb_\xc4\'\xfb\x9d?\xeb\x80\xab\xbdQ\xb7\xc3%O?~\xf2\x0f\xfa\xf0\x7f\\_\x9b;\xb2o|\xe3\x9e\xbd\xf3\xce\x12\xc7\xc7\xab\x9f{\xa9\xf2\xe7\xdd\x1b\xb4\xf7\xde\xfb\xa6\x1e\x1f\x03w\xef\xfe\xf1\xeeo\xff\xcb\x8e1\x02\xd3\x83\x7fMo\xfc\xf6\xeb\x19@r\x8e\xb7\x94\xcbjk\xe5\x84`]5n\x8aj\x9crv\xd3\x94e\x9c\n\x0fC\xe1bJV\x94\xae\xa5\x98\x83@\xdcn\x88)\x80WR\xb6\xac`Q\xef\xac\xb2jQ\xd8T9\x8f\xe4\xfbM\xe7\xe3\xa6\xefm\xfbV\x1f\xc7\xfa\xba\xcb\x0f\xfe\xeb\xc3\xfa\xf0\xfb\xff\xf9\xb9\x8b\x93w\xef\x1e\xe3\xf8\xf8\xf7o\xd6\xf0\xfe\xfb\xff\xc8Wg\x01\xd0\x1f\xfc\xc1Gr\x1cV\xb28I\xf2\xe0\xfa\xea\xec:\xf3i\x1a\xe8\xfc|\xa4ZFZ\xaf\x01\xad\xe9\x85\xcf\xec\x17\x00\xd0\xcf\xf3\t\x89\x86%\xe0\\c\x87\xaeX\xb8\xdd\xdab\xcf\xabb\xbe:\x1b~\xe3W\xcb\xdb\xed\x97\xeb7\xbf\t\xddq\xfa\x7f\xbc\xab\xb3?\xfb\xa66~\xa9\x8b\xca\xff\xf87\xc8\xbf\xf83\xf1/\xb7\xf8\x7fZ7\xc7\x9fU\xb4\xf4\x05\x1f\xed\xff\x02\x05\xd3\xdb\xd6\xe4\x8b2\x0c\x00\x00\x00\x00IEND\xaeB`\x82'
    
        similarity = images_compare(favicon_data, no_logo_byte_array)
        if similarity > 99:
            url = favicon_url
            favicon_url = get_favicon_no_secure_protocol(favicon_url)
            #print(f"First print {favicon_url}")
            headers = {'User-Agent': UserAgent().random}
            response = requests.get(favicon_url, headers = headers, verify = False, timeout = 10)

            try:
                logo = Image.open(BytesIO(response.content))
                logo.verify() 
            except:
                print(f"Invalid image file: {favicon_url}")
                return None, None
                
            logo = Image.open(BytesIO(response.content))
            logo = logo.resize((64, 64), Image.LANCZOS)
                
            byte_arr = BytesIO()
            logo.save(byte_arr, format = 'PNG', optimize = True
            )
            favicon_data = byte_arr.getvalue()
            similarity = images_compare(favicon_data, no_logo_byte_array)
            if similarity > 99: 
                favicon_url = get_favicon_no_secure_protocol_www(url)
                #print(f"Second print {favicon_url}")
                headers = {'User-Agent': UserAgent().random}
                response = requests.get(favicon_url, headers = headers, verify = False, timeout = 10)

                try:
                    logo = Image.open(BytesIO(response.content))
                    logo.verify() 
                except:
                    print(f"Invalid image file: {favicon_url}")
                    return None, None
                    
                logo = Image.open(BytesIO(response.content))
                logo = logo.resize((64, 64), Image.LANCZOS)
                    
                byte_arr = BytesIO()
                logo.save(byte_arr, format = 'PNG', optimize = True
                )
                favicon_data = byte_arr.getvalue()
                similarity = images_compare(favicon_data, no_logo_byte_array)
                if similarity > 99:
                    favicon_url = get_favicon_www(url)
                    #print(f"Third print {favicon_url}")
                    headers = {'User-Agent': UserAgent().random}
                    response = requests.get(favicon_url, headers = headers, verify = False, timeout = 10)

                    try:
                        logo = Image.open(BytesIO(response.content))
                        logo.verify() 
                    except:
                        print(f"Invalid image file: {favicon_url}")
                        return None, None
                        
                    logo = Image.open(BytesIO(response.content))
                    logo = logo.resize((64, 64), Image.LANCZOS)
                        
                    byte_arr = BytesIO()
                    logo.save(byte_arr, format = 'PNG', optimize = True
                    )
                    favicon_data = byte_arr.getvalue()
                    similarity = images_compare(favicon_data, no_logo_byte_array) 
                    if similarity > 99:
                        favicon_url = get_favicon_enhanced(url)
                        #print(f"Fourth print {favicon_url}")
                        headers = {'User-Agent': UserAgent().random}
                        response = requests.get(favicon_url, headers = headers, verify = False, timeout = 10)
                      
                        # Handle SVG files
                        if 'svg' in response.headers.get:
                            png_data = cairosvg.svg2png(bytestring=response.content)
                            logo = Image.open(BytesIO(png_data))
                            try:
                                logo.verify()
                            except:
                                print("AI BELIT PULA")
                        else:
                            try:
                                logo = Image.open(BytesIO(response.content))
                                logo.verify()
                            except:
                                is_no_logo = True
                                return backup_favicon_data, is_no_logo
                            
                        logo = Image.open(BytesIO(response.content))
                        logo = logo.resize((64, 64), Image.LANCZOS)
                            
                        byte_arr = BytesIO()
                        logo.save(byte_arr, format = 'PNG', optimize = True)
                        favicon_data = byte_arr.getvalue()
                        similarity = images_compare(favicon_data, no_logo_byte_array) 
                        is_no_logo = similarity > 99
                    else:
                        is_no_logo = False
                else:
                    is_no_logo = False
            else:
                is_no_logo = False
        else:
            is_no_logo = False

        return favicon_data, is_no_logo    
    except Exception as e:
        is_no_logo = True
        return favicon_data, is_no_logo

def store_favicon_in_db(domain, svg_data, is_no_logo):
    try:
        conn = psycopg2.connect(
            dbname = "svg_storage",
            user = "postgres",
            password = "dlmvm",
            host = "localhost",
            port = "5432"
        )
        cursor = conn.cursor()

        cursor.execute(
            """INSERT INTO favicons (domain, svg_data, is_no_logo) 
               VALUES (%s, %s, %s) 
               ON CONFLICT (domain) DO UPDATE SET 
               svg_data = EXCLUDED.svg_data,
               is_no_logo = EXCLUDED.is_no_logo 
               WHERE favicons.svg_data IS DISTINCT FROM EXCLUDED.svg_data""",
            (domain, svg_data, is_no_logo)
        )
        conn.commit()

        cursor.close()
        conn.close()

    except Exception as e:
        print(f"Database error: {e}")



num_cores = os.cpu_count()

print(f"Number of virtual cores: {num_cores}")

df = pd.read_parquet("logos.snappy.parquet", engine="fastparquet")
df.drop_duplicates(inplace=True)

# with open("dump.txt", "r") as file:
#     lines = file.readlines()

# # Create a DataFrame from the lines
# df = pd.DataFrame(lines, columns=["domain"])

i = 0
j = 0

with ThreadPoolExecutor(max_workers = num_cores) as executor:
    future_to_domain = {executor.submit(get_favicon, row[1]['domain']): row[1]['domain'] for row in df.iterrows()}

    for future in as_completed(future_to_domain):
        domain = future_to_domain[future]
        try:
            favicon_url = future.result()
            if favicon_url:
                favicon_data, is_no_logo = download_convert_favicon(favicon_url)

                if favicon_data:
                    store_favicon_in_db(domain, favicon_data, is_no_logo)
    
                else:
                    j += 1
                    continue
            else:
                i += 1
                continue
                        
        except Exception as e:
            print(f"GETTING DOMAIN ERROR : {e} FOR {domain}")
            continue
# chicco.pl
#
# url = "bbraun.ae"
# url = "bbraun.ae"
# print(f"{get_favicon(url)}")
# print(f"{download_convert_favicon(get_favicon(url))}")



print(f"\nTotal number of failed url favicons: {i}")
print(f"\nTotal number of failed image downloads: {j}\n")

elapsed_time = time.time() - start_time
minutes, seconds = divmod(elapsed_time, 60)
print(f"--- {int(minutes)} minutes and {int(seconds)} seconds ---")
#--- 14 minutes and 9 seconds ---